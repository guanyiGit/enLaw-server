package com.soholy.service.server;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class EnLawServer {

    @Value("${netty.server.port}")
    private Integer serverPort;


    @Autowired
    private NettyServerHandler nettyServerHandler;

    public void start() {
        try {
            //1. 创建一个线程组：接收客户端连接
            EventLoopGroup bossGroup = new NioEventLoopGroup();
            //2. 创建一个线程组：处理网络操作
            EventLoopGroup workerGroup = new NioEventLoopGroup();
            //3. 创建服务器端启动助手来配置参数
            ServerBootstrap serverBootstrap = new ServerBootstrap();
            //配置启动信息
            serverBootstrap
                    //4.设置两个线程组
                    .group(bossGroup, workerGroup)
                    //5.使用NioServerSocketChannel作为服务器端通道的实现
                    .channel(NioServerSocketChannel.class)
                    //6.设置线程队列中等待连接的个数
                    .option(ChannelOption.SO_BACKLOG, 128)
                    //7.保持活动连接状态
                    .childOption(ChannelOption.SO_KEEPALIVE, true)
                    //8. 创建一个通道初始化对象
                    .childHandler(new ChannelInitializer<SocketChannel>() {
                        public void initChannel(SocketChannel socketChannel) {
                            //9. 往PipelineChannel链中添加自定义的handler类
                            socketChannel.pipeline().addLast("decoder", new ServerMessageDecode()).addLast(nettyServerHandler);
                        }
                    });
            //异步启动服务,并同步等待
            System.out.println("......Server is ready ......");
            //10. 绑定端口 bind方法是异步的,sync方法是同步阻塞的,即等待连接成功代码才继续往下执行
            ChannelFuture future = serverBootstrap.bind(serverPort).sync();
            System.out.println("......Server is starting...... port:[" + serverPort + "]");
            //11. 关闭通道，关闭线程组
            future.channel().closeFuture().sync(); //closeFuture异步 sync同步阻塞
            bossGroup.shutdownGracefully();
            workerGroup.shutdownGracefully();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}